---
openapi: 3.0.2
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a modified version of the Pet Store OpenAPI 3.0 specification.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Useful links for the original spec:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.2
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: /v3
tags:
- name: pets
  description: Everything about your Pets
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: orders
  description: Operations about the orders
- name: customers
  description: Custoers
paths:
  /pets:
    get:
      tags:
      - pets
      summary: Finds Pets by tags and status
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing. Multiple status values can be provided with comma separated strings
      operationId: findPetsByTagsOrStatus
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: available
          enum:
          - available
          - pending
          - sold
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        "400":
          description: Invalid tag value
    post:
      tags:
      - pets
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: URL of the created Pet.
              style: simple
              explode: false
              schema:
                type: string
        "400":
          description: Invalid input
  /pets/inventory:
    get:
      tags:
      - pets
      summary: Finds pet inventory
      description: Inventory of pets
      operationId: findInventoryOfPets
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Inventory'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Inventory'
        "400":
          description: Invalid tag value
  /pets/{petId}:
    get:
      tags:
      - pets
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
      - name: petId
        in: path
        description: ID of pet to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
    delete:
      tags:
      - pets
      summary: Deletes a pet
      operationId: deletePet
      parameters:
      - name: petId
        in: path
        description: Pet id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Deleted successfully
        "400":
          description: Invalid pet value
    patch:
      tags:
      - pets
      summary: Updates a pet
      operationId: patchPet
      parameters:
      - name: petId
        in: path
        description: ID of pet that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetPatch'
          application/xml:
            schema:
              $ref: '#/components/schemas/PetPatch'
        required: true
      responses:
        "400":
          description: Invalid input
  /orders:
    get:
      tags:
      - orders
      summary: Finds orders
      description: Finds orders
      operationId: findOrders
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        "400":
          description: Invalid tag value
    post:
      tags:
      - orders
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: URL of the created order.
              style: simple
              explode: false
              schema:
                type: string
        "400":
          description: Invalid input
  /orders/{orderId}:
    get:
      tags:
      - orders
      summary: Find purchase order by ID
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: ID of order that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    delete:
      tags:
      - orders
      summary: Delete purchase order by ID
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Deleted successfully
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    patch:
      tags:
      - orders
      summary: Updates an order
      operationId: patchOrder
      parameters:
      - name: orderId
        in: path
        description: ID of order that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Create a new order in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderPatch'
          application/xml:
            schema:
              $ref: '#/components/schemas/OrderPatch'
        required: true
      responses:
        "400":
          description: Invalid input
  /customers:
    get:
      tags:
      - customers
      summary: Finds customers
      operationId: findCustomers
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        "400":
          description: Invalid tag value
    put:
      tags:
      - customers
      summary: Update an existing customer
      description: Update an existing customer by Id
      operationId: updateCustomer
      requestBody:
        description: Update an existing customer for the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
          application/xml:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "400":
          description: Invalid ID supplied
        "404":
          description: Customer not found
    post:
      tags:
      - customers
      summary: Add a new customer
      description: Add a new customer
      operationId: addCustomer
      requestBody:
        description: Create a new customer for the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
          application/xml:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "400":
          description: Invalid input
  /customers/{customerId}:
    get:
      tags:
      - customers
      summary: Find customer by ID
      description: Returns a single customer
      operationId: getCustomerById
      parameters:
      - name: customerId
        in: path
        description: ID of customer to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "400":
          description: Invalid ID supplied
        "404":
          description: Customer not found
    delete:
      tags:
      - customers
      summary: Delete customer by ID
      description: Delete customer by ID
      operationId: deleteCustomer
      parameters:
      - name: customerId
        in: path
        description: ID of the customer that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Deleted successfully
        "400":
          description: Invalid ID supplied
        "404":
          description: Customer not found
components:
  schemas:
    Order:
      required:
      - customerId
      - id
      - petId
      - price
      - shipDate
      - status
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        customerId:
          type: integer
          format: int64
          example: 100000
        petId:
          type: integer
          format: int64
          example: 198772
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
          - placed
          - approved
          - delivered
          - completed
        price:
          type: number
          format: double
          example: 999.99
      xml:
        name: order
      x-swagger-router-model: io.swagger.petstore.model.Order
    OrderPatch:
      type: object
      properties:
        customerId:
          type: integer
          format: int64
          example: 100000
        petId:
          type: integer
          format: int64
          example: 198772
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
          - placed
          - approved
          - delivered
          - completed
        price:
          type: number
          format: double
          example: 999.99
      xml:
        name: order
      x-swagger-router-model: io.swagger.petstore.model.Order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        firstName:
          type: string
          example: Josh
        lastName:
          type: string
          example: Smith
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
      x-swagger-router-model: io.swagger.petstore.model.Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
      x-swagger-router-model: io.swagger.petstore.model.Tag
    Inventory:
      type: object
      properties:
        animal:
          type: string
          example: dog
        quantity:
          type: integer
          format: int64
          example: 100
      x-swagger-router-model: io.swagger.petstore.model.Inventory
    PetPatch:
      type: object
      properties:
        name:
          type: string
          example: Buddy
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: pet
      x-swagger-router-model: io.swagger.petstore.model.PetPatch
    Pet:
      required:
      - category
      - id
      - name
      - photoUrls
      - status
      - tags
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Buddy
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: pet
      x-swagger-router-model: io.swagger.petstore.model.Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
